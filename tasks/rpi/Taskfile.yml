version: 3

tasks:
  novchiq-overlay:
    internal: true
    desc: Build novchiq DTB overlay
    summary: |
      Build novchiq DTB overlay

      Optional variables:

      * BUILD_DIR
    run: once
    cmds:
      - dtc -@ -I dts -O dtb -o {{if .BUILD_DIR}}{{.BUILD_DIR}}/{{end}}novchiq.dtbo novchiq-overlay.dts

  install-files:
    internal: true
    requires:
      vars: [MNT_POINT, FIRMWARE_DIR, ARCHITECTURE]
    status:
      - test -f {{.FIRMWARE_DIR}}/headless.rpi
    cmds:
      - task: novchiq-overlay
        vars:
          BUILD_DIR: '{{.BUILD_DIR}}'
      - cp {{if .BUILD_DIR}}{{.BUILD_DIR}}/{{end}}novchiq.dtbo {{.FIRMWARE_DIR}}/overlays
      - mv {{.FIRMWARE_DIR}}/config.txt {{.FIRMWARE_DIR}}/config.ubu
      - cp headless-config-{{.ARCHITECTURE}}.txt {{.FIRMWARE_DIR}}/config.txt
      - touch {{.FIRMWARE_DIR}}/headless.rpi

  install:
    desc: Additional instalation tasks
    vars:
      FIRMWARE_DIR: '{{.MNT_POINT}}/boot/firmware'
    deps:
      - task: install-files
        vars:
          MNT_POINT: '{{.MNT_POINT}}'
          BUILD_DIR: '{{.BUILD_DIR}}'
          FIRMWARE_DIR: '{{.FIRMWARE_DIR}}'
          ARCHITECTURE: '{{.ARCHITECTURE}}'
 
  cloud-init-internal:
    internal: true
    requires:
      vars: [BUILD_DIR, USER_DATA, ARCHITECTURE]
    env:
      NOVCHIQ_B64:
        sh: base64 {{.BUILD_DIR}}/novchiq.dtbo
      CONFIG_TXT:
        sh: 'base64 headless-config-{{.ARCHITECTURE}}.txt'
    cmds:
      - yq -i --from-file=cloud-init.yq {{.USER_DATA}}

  cloud-init:
    internal: true
    desc: clud-init configuration
    requires:
      vars: [BUILD_DIR, USER_DATA, ARCHITECTURE]
    deps:
      - task: novchiq-overlay
        vars:
          BUILD_DIR: '{{.BUILD_DIR}}'
    cmds:
      - task: cloud-init-internal
        vars:
          BUILD_DIR: '{{.BUILD_DIR}}'
          USER_DATA: '{{.USER_DATA}}'
          ARCHITECTURE: '{{.ARCHITECTURE}}'

  rpi:
    aliases: [default]
    desc: Configure Raspberry Pi as headless machine
    deps: [install]
